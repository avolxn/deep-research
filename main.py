import asyncio
import logging
import uuid

from langchain_core.messages import HumanMessage

from agent.graph import deep_research_agent


def _silence_external_logs() -> None:
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    logging.captureWarnings(True)

    quiet_loggers = ["langgraph", "langchain_google_genai"]
    for name in quiet_loggers:
        logger = logging.getLogger(name)
        logger.setLevel(logging.ERROR)
        logger.propagate = False


async def main() -> None:
    _silence_external_logs()

    print("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Deep Research Agent!")
    print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–∏–ª–∏ '/exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")

    while True:
        topic = input("\n–¢–µ–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: ").strip()
        if topic.lower() == "/exit":
            print("–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            return
        if not topic:
            continue

        session_id = str(uuid.uuid4())
        config = {"configurable": {"thread_id": session_id}}
        inputs = {"messages": [HumanMessage(content=topic)]}

        while True:
            async for event in deep_research_agent.astream(inputs, config=config, stream_mode="updates"):
                if event.get("clarify_with_user"):
                    print(f"\nü§ñ {event['clarify_with_user']['messages'][0].content}")
                elif event.get("write_research_brief"):
                    print("\n" + "=" * 80)
                    print("–ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï:\n")
                    print(event["write_research_brief"]["research_brief"])
                    print("=" * 80)
                    print("\n–ò–¥—ë—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...")
                elif event.get("generate_report"):
                    print("\n" + "=" * 80)
                    print("–û–¢–ß–Å–¢:\n")
                    print(event["generate_report"]["final_report"])
                    print("=" * 80)
                    break
            else:
                followup = input("\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: ").strip()
                inputs = {"messages": [HumanMessage(content=followup)]}
                continue
            break


if __name__ == "__main__":
    asyncio.run(main())
